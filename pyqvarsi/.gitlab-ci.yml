# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

# Official language image. Look for the different tagged releases at:
# https://hub.docker.com/r/library/python/tags/
image: python:3.11.11

# Change pip's cache directory to be inside the project directory since we can
# only cache local items.
variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"

# Pip's cache doesn't store the python packages
# https://pip.pypa.io/en/stable/topics/caching/
#
# If you want to also cache the installed packages, you have to install
# them in a virtualenv and cache it as well.
cache:
  paths:
    - .cache/pip
    - venv/

stages:          # List of stages for jobs, and their order of execution
  - build
  - test
  - deploy

## Confgure the build jobs

before_script:          # This job configures the required environment per each of the following jobs
  - echo "Configuring the environment..."
  # Install dependencies
  - apt-get update
  - apt-get install -y openmpi-bin libopenmpi-dev libhdf5-mpi-dev
  # Python virtual env
  - python --version  # For debugging
  - pip install virtualenv
  - virtualenv venv
  - source venv/bin/activate
  # Install prerequisites
  - CC=mpicc HDF5_MPI="ON" pip install --no-binary=h5py h5py
  - pip install setuptools build twine
  - make requirements
  - echo "Configuring complete."

build-GCC:       # This job runs in the build stage, which runs first.
  stage: build
  inherit:
    default: true
    variables: true
  rules:
    - if: ($CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH || $CI_COMMIT_BRANCH == "develop") && $CI_PIPELINE_SOURCE == "merge_request_event"
  script:
    - echo "Compiling the code..."
    - make python
    - make install
    - echo "Compile complete."

examples-test:
  stage: test
  inherit:
    default: true
    variables: true
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
  script:
    - echo "Testing..."
    - make python
    - make install
    - python examples/example_solvers.py
    - python examples/example_GEOM.py
    - python examples/example_GEOM_3D.py
    - python examples/example_FEM.py
    - python examples/example_FEM_interp2D.py
    - python examples/example_FEM_interp.py
    - python examples/example_MESH_clip.py
    - python examples/example_postproc_burgers.py
    - python examples/example_postproc_fft.py
    - python examples/example_postproc_fft_welch.py
    - python examples/example_postproc_fft_welch_cascade.py
    - python examples/example_rotation.py
    - python examples/example_io_h5.py
    - python examples/example_io_h5_xdmf.py
    - python examples/example_io_vtkhdf.py
    - echo "Testing complete."
  artifacts:
    paths:
      - "./*.h5"
      - "./*.xdmf"
      - "./*.png"
    when: on_success
    expire_in: 1 days

deploy-pypi:
  stage: deploy
  inherit:
    default: true
    variables: true
  rules:
    - if: $CI_COMMIT_TAG # Run this job when a tag is created
  script:
    - echo "Deploying..."
    - sed -i 's/USE_COMPILED     = ON/USE_COMPILED     = OFF/g' config/options_default.cfg
    - make cleanall
    - make package-build
    - TWINE_PASSWORD=${PYPI_TOKEN} TWINE_USERNAME=__token__ python -m twine upload dist/*.tar.gz
    - echo "Deploying complete."